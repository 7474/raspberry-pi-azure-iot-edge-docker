name: dotnet-with-opencvsharp/Docker

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - master
    # Publish `v1.2.3` tags as releases.
    tags:
      - v*
    paths:
      - dotnet-with-opencvsharp/Dockerfile
      - .github/workflows/dotnet-with-opencvsharp-publish.yml

  # Run tests for any PRs.
  pull_request:
    paths:
      - dotnet-with-opencvsharp/Dockerfile

env:
  IMAGE_NAME: raspberry-pi-azure-iot-edge-opencvsharp

jobs:
#   # Run tests.
#   # See also https://docs.docker.com/docker-hub/builds/automated-testing/
#   test:
#     runs-on: ubuntu-latest

#     steps:
#       - uses: actions/checkout@v2

#       - name: Run tests
#         run: |
#           cd dotnet-with-opencvsharp
#           if [ -f docker-compose.test.yml ]; then
#             docker-compose --file docker-compose.test.yml build
#             docker-compose --file docker-compose.test.yml run sut
#           else
#             docker build . --file Dockerfile
#           fi

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
#     # Ensure test job passes before pushing image.
#     needs: test

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: Setup image info
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          echo "::set-env name=IMAGE_ID::$IMAGE_ID"
          echo "::set-env name=VERSION::$VERSION"

      - name: setup docker for arm
        run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

      - name: Build image
        run: docker build . --file dotnet-with-opencvsharp/Dockerfile --tag $IMAGE_NAME --cache-from=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME:$VERSION

      - name: Log into GitHub Container Registry
        # PAT with `read:packages` and `write:packages` scopes and save it as an Actions secret `CR_PAT`
        run: echo "${{ secrets.CR_PAT }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push image to GitHub Container Registry
        run: |
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
